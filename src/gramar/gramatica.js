/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,21],$V3=[1,31],$V4=[1,23],$V5=[1,29],$V6=[1,24],$V7=[1,28],$V8=[1,25],$V9=[1,30],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,27],$Vh=[1,32],$Vi=[5,14,16,25,27,31,32,37,41,43,44,45,49,53,59,60,61,62,63,64,65,69],$Vj=[1,51],$Vk=[1,60],$Vl=[1,62],$Vm=[1,65],$Vn=[1,76],$Vo=[1,63],$Vp=[1,64],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,77],$VB=[1,78],$VC=[49,54,71],$VD=[1,114],$VE=[1,115],$VF=[1,104],$VG=[1,106],$VH=[1,105],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[15,31,34,42,55,58,70,71,75,76,77,79,80,81,82,83,84,85,86,87,88,89],$VT=[1,141],$VU=[34,58],$VV=[5,14,16,25,27,31,32,36,37,41,43,44,45,49,53,59,60,61,62,63,64,65,69],$VW=[15,31,34,42,55,58,75,87,88,89],$VX=[15,31,34,42,55,58,70,71,75,76,77,79,80,81,83,84,85,86,87,88,89],$VY=[15,31,34,42,55,58,70,71,75,77,79,83,84,85,86,87,88,89],$VZ=[15,31,34,42,55,58,70,71,75,83,84,85,86,87,88,89],$V_=[1,229],$V$=[31,41,43],$V01=[31,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"instrucciones":4,"EOF":5,"instruccion":6,"iIF":7,"iwhile":8,"asignacion":9,"declaracion":10,"fPRINT":11,"ifor":12,"switch":13,"BREAK":14,";":15,"CONTIN":16,"dowhile":17,"decArray":18,"asignarArr":19,"FUNCION":20,"Llamada":21,"RETORNO":22,"Listas":23,"AddList":24,"MAIN":25,"AsignList":26,"RETN":27,"Expresion":28,"BSENTENCIAS":29,"{":30,"}":31,"IF":32,"(":33,")":34,"ELSE":35,"tELSE":36,"SWITCH":37,"BLOQSWITCH":38,"fDEFAULT":39,"fcase":40,"CASE":41,":":42,"DEFAULT":43,"WHILE":44,"FOR":45,"AssignFor":46,"Actualiz":47,"TIPO":48,"ID":49,"=":50,"++":51,"--":52,"DO":53,"[":54,"]":55,"NEW":56,"Lista_Valores":57,",":58,"DOUBLE":59,"INT":60,"STRING":61,"CHAR":62,"BOOLEAN":63,"VOID":64,"PRINT":65,"PARAMS":66,"PARAM":67,"ARG":68,"LIST":69,"<":70,">":71,".":72,"ADD":73,"[[":74,"]]":75,"*":76,"-":77,"!":78,"+":79,"/":80,"%":81,"^":82,"==":83,"!=":84,"<=":85,">=":86,"||":87,"&&":88,"?":89,"len":90,"tLow":91,"tUpp":92,"trun":93,"round":94,"typ":95,"toStr":96,"DECIMAL":97,"ENTERO":98,"CADENA":99,"ttrue":100,"tfalse":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"BREAK",15:";",16:"CONTIN",25:"MAIN",27:"RETN",30:"{",31:"}",32:"IF",33:"(",34:")",36:"tELSE",37:"SWITCH",41:"CASE",42:":",43:"DEFAULT",44:"WHILE",45:"FOR",49:"ID",50:"=",51:"++",52:"--",53:"DO",54:"[",55:"]",56:"NEW",58:",",59:"DOUBLE",60:"INT",61:"STRING",62:"CHAR",63:"BOOLEAN",64:"VOID",65:"PRINT",69:"LIST",70:"<",71:">",72:".",73:"ADD",74:"[[",75:"]]",76:"*",77:"-",78:"!",79:"+",80:"/",81:"%",82:"^",83:"==",84:"!=",85:"<=",86:">=",87:"||",88:"&&",89:"?",90:"len",91:"tLow",92:"tUpp",93:"trun",94:"round",95:"typ",96:"toStr",97:"DECIMAL",98:"ENTERO",99:"CADENA",100:"ttrue",101:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[22,3],[29,3],[29,2],[7,5],[7,6],[35,2],[35,2],[13,8],[38,2],[38,1],[40,4],[39,3],[39,0],[8,5],[12,9],[46,4],[46,3],[47,3],[47,2],[47,2],[17,7],[10,5],[10,3],[9,4],[9,3],[9,3],[18,11],[18,9],[57,3],[57,1],[19,7],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[11,5],[20,5],[20,6],[66,3],[66,1],[67,2],[21,4],[21,5],[68,3],[68,1],[23,12],[24,7],[26,7],[28,3],[28,3],[28,2],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,5],[28,4],[28,4],[28,4],[28,4],[28,4],[28,4],[28,4],[28,4],[28,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,3],[28,4],[28,2],[28,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$={gram: $$[$0-1].gram, nodo: new NODO("INICIO")};
    this.$.nodo.hijos.push($$[$0-1].nodo);
    this.$.nodo.hijos.push(new NODO("EOF"));
    return this.$

break;
case 2:
$$[$0-1].gram.push($$[$0].gram);
    $$[$0-1].nodo.hijos.push($$[$0].nodo); 
    this.$={gram: $$[$0-1].gram,nodo: $$[$0-1].nodo};
    
break;
case 3:
this.$={gram: [$$[$0].gram] ,nodo:new NODO("Instrucciones")};
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 4: case 6: case 7: case 8: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 22:
this.$={gram: $$[$0].gram,nodo: new NODO("Instruccion")};
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 5:
this.$={gram:$$[$0].gram,nodo: new NODO("Instruccion")};
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 9:
this.$={gram:$$[$0].gram,nodo:new NODO("Instruccion")};
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 11:
this.$={gram: new BREAK("1",_$[$0-1].first_line,_$[$0-1].first_column),nodo: new NODO("Instruccion")};
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
    
break;
case 12:
this.$={gram: new BREAK("2",_$[$0-1].first_line,_$[$0-1].first_column),nodo: new NODO("Instruccion")};
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
    
break;
case 21:
this.$={gram: new Main($$[$0].gram,_$[$0-1].first_line,_$[$0-1].first_column), nodo:new NODO("Instruccion")};
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 23:
this.$={gram: new BREAK("3",$$[$0-1].gram,_$[$0-2].first_line,_$[$0-2].first_column), nodo: new NODO("RETORNO")};
    this.$.nodo.hijos.push(new NODO($$[$0-2]));
    this.$.nodo.hijos.push($$[$0-1].nodo);

break;
case 24:
this.$={gram: new Instrucciones($$[$0-1].gram,_$[$0-2].first_line,_$[$0-2].first_column), nodo: $$[$0-1].nodo};
break;
case 26:
this.$={gram: new IF($$[$0-2].gram,$$[$0].gram,null,_$[$0-4].first_line,_$[$0-4].first_column),nodo: new NODO("If")};
        this.$.nodo.hijos.push(new NODO($$[$0-4]));
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 27:
this.$={gram: new IF($$[$0-3].gram,$$[$0-1].gram,$$[$0].gram,_$[$0-5].first_line,_$[$0-5].first_column), nodo: new NODO("if")};
    
        this.$.nodo.hijos.push(new NODO($$[$0-5]));
        this.$.nodo.hijos.push(new NODO($$[$0-4]));
        this.$.nodo.hijos.push($$[$0-3].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-2]));
        this.$.nodo.hijos.push($$[$0-1].nodo);
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 28: case 29:
this.$ ={gram: $$[$0].gram ,nodo: new NODO("Else")};
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 30:
this.$= {gram:new SWITCH($$[$0-5].gram,$$[$0-2].gram,$$[$0-1].gram,_$[$0-7].first_line,_$[$0-7].first_column),nodo: new NODO("Switch")};
    this.$.nodo.hijos.push(new NODO($$[$0-7]));
    this.$.nodo.hijos.push(new NODO($$[$0-6]));
    this.$.nodo.hijos.push($$[$0-5].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-4]));
    this.$.nodo.hijos.push($$[$0-2].nodo);
    this.$.nodo.hijos.push($$[$0-1].nodo)

break;
case 31:
$$[$0-1].gram.push($$[$0].gram); $$[$0-1].nodo.hijos.push($$[$0].nodo);

    this.$={gram: $$[$0-1].gram,nodo: $$[$0-1].nodo};

break;
case 32:
this.$={gram: [$$[$0].gram], nodo: new NODO("Bloq_Case")};
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 33:
this.$={gram:new CASE($$[$0-2].gram,$$[$0].gram),nodo:new NODO("Case")};
    this.$.nodo.hijos.push(new NODO($$[$0-3]));
    this.$.nodo.hijos.push($$[$0-2].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-1]));
    this.$.nodo.hijos.push($$[$0].nodo);

break;
case 34:
this.$= {gram: $$[$0].gram,nodo:new NODO("Default")};
        this.$.nodo.hijos.push(new NODO($$[$0-2]));
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 35:
this.$={gram: "", nodo: new NODO("Default")};
break;
case 36:
this.$={gram:new While($$[$0-2].gram,$$[$0].gram,_$[$0-4].first_line,_$[$0-4].first_column),nodo: new NODO("While")};
    this.$.nodo.hijos.push(new NODO($$[$0-4]));
    this.$.nodo.hijos.push(new NODO($$[$0-3]));
    this.$.nodo.hijos.push($$[$0-2].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-1]));
    this.$.nodo.hijos.push($$[$0].nodo);

break;
case 37:
this.$={gram: new FOR($$[$0-6].gram,$$[$0-4].gram,$$[$0-2].gram,$$[$0].gram,_$[$0-8].first_line,_$[$0-8].first_column), nodo: new NODO("FOR")};
        this.$.nodo.hijos.push(new NODO($$[$0-8]));
        this.$.nodo.hijos.push($$[$0-6].nodo);
        this.$.nodo.hijos.push($$[$0-4].nodo);
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 38:
this.$={gram:new Declaracion($$[$0-3].gram,$$[$0-2].toLowerCase(),$$[$0].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo: new NODO("Asignacion")};
        this.$.nodo.hijos.push($$[$0-3].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-2]));
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 39:
this.$= {gram:new Asignacion($$[$0-2],$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new NODO("Asignación")};
        this.$.nodo.hijos.push(new NODO($$[$0-2]));
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 40:
this.$={gram:new Asignacion($$[$0-2],$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column),nodo:new NODO("Actualiz")};
        this.$.nodo.hijos.push(new NODO($$[$0-2]));
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 41:
this.$= {gram:new Asignacion($$[$0-1],"+",false,_$[$0-1].first_line,_$[$0-1].first_column),nodo:new NODO("Actualiz")};
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push(new NODO($$[$0]));
    
break;
case 42:
this.$= {gram:new Asignacion($$[$0-1],"-",false,_$[$0-1].first_line,_$[$0-1].first_column),nodo:new NODO("Actualiz")};
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push(new NODO($$[$0]));
    
break;
case 43:
this.$={gram: new DOWHile($$[$0-5].gram,$$[$0-2].gram,_$[$0-6].first_line,_$[$0-6].first_column),nodo: new NODO("Do-While")};
    this.$.nodo.hijos.push(new NODO("Do"));
    this.$.nodo.hijos.push($$[$0-5].nodo);
    this.$.nodo.hijos.push(new NODO("While"));
    this.$.nodo.hijos.push($$[$0-2].nodo);

break;
case 44:
this.$={gram:new Declaracion($$[$0-4].gram,$$[$0-3].toLowerCase(),$$[$0-1].gram,_$[$0-4].first_line,_$[$0-4].first_column),nodo: new NODO("Declaracion")};
    this.$.nodo.hijos.push($$[$0-4].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-3]));
    this.$.nodo.hijos.push(new NODO($$[$0-2]));
    this.$.nodo.hijos.push($$[$0-1].nodo);

break;
case 45:
this.$={gram: new Declaracion($$[$0-2].gram,$$[$0-1].toLowerCase(),null,_$[$0-2].first_line,_$[$0-2].first_column),nodo:new NODO("Declaracion")};
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
    
break;
case 46:
this.$= {gram:new Asignacion($$[$0-3].toLowerCase(),$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column),nodo: new NODO("Asignacion")};
    this.$.nodo.hijos.push(new NODO($$[$0-3]));
    this.$.nodo.hijos.push(new NODO($$[$0-2]));
    this.$.nodo.hijos.push($$[$0-1].nodo);

break;
case 47:
this.$= {gram:new Asignacion($$[$0-2].toLowerCase(),"+",false,_$[$0-2].first_line,_$[$0-2].first_column),nodo:new NODO("Asignacion")};
        this.$.nodo.hijos.push(new NODO($$[$0-2]));
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
    
break;
case 48:
this.$= {gram:new Asignacion($$[$0-2].toLowerCase(),"-",false,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new NODO("Asignacion")};
        this.$.nodo.hijos.push(new NODO($$[$0-2]));
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
    
break;
case 49:
this.$={gram:new DeclaArray($$[$0-10].gram,$$[$0-7].toLowerCase(),$$[$0-4].gram,$$[$0-2].gram,_$[$0-10].first_line,_$[$0-10].first_column),nodo: new NODO("Declarar_Arr")};
    this.$.nodo.hijos.push($$[$0-10].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-7]));
    this.$.nodo.hijos.push(new NODO($$[$0-3]));
    this.$.nodo.hijos.push($$[$0-2].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-1].nodo));

break;
case 50:
this.$={gram: new DeclaArray($$[$0-8].gram,$$[$0-5].toLowerCase(),null,$$[$0-2].gram,_$[$0-8].first_line,_$[$0-8].first_column),nodo: new NODO("Declarar_Arr")};
        this.$.nodo.hijos.push($$[$0-8].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-5]));
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
    
break;
case 51:
$$[$0-2].gram.push($$[$0].gram); $$[$0-2].nodo.hijos.push($$[$0].nodo);
    this.$={gram: $$[$0-2].gram,nodo:$$[$0-2].nodo};

break;
case 52:
this.$={gram:[$$[$0].gram], nodo: new NODO("Lista_valores")};
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 53:
this.$={gram:new AsignarA($$[$0-6].toLowerCase(),$$[$0-4].gram,$$[$0-1].gram,_$[$0-6].first_line,_$[$0-6].first_column),nodo: new NODO("Asignar_Arr")};
    this.$.nodo.hijos.push(new NODO($$[$0-6]));
    this.$.nodo.hijos.push($$[$0-4].nodo);
    this.$.nodo.hijos.push($$[$0-1].nodo);

break;
case 54:
this.$={gram: Tipo.DOUBLE,nodo: new NODO("Tipo")};
        this.$.nodo.hijos.push(new NODO(`${Tipo[Tipo.DOUBLE]}`));
    
break;
case 55:
this.$={gram: Tipo.INT,nodo: new NODO("Tipo")};
        this.$.nodo.hijos.push(new NODO(`${Tipo[Tipo.INT]}`));
    
break;
case 56:
this.$={gram: Tipo.STRING,nodo: new NODO("Tipo")};
        this.$.nodo.hijos.push(new NODO(`${Tipo[Tipo.STRING]}`));
    
break;
case 57:
this.$={gram: Tipo.CHAR, nodo: new NODO("Tipo")};
        this.$.nodo.hijos.push(new NODO(`${Tipo[Tipo.CHAR]}`));
    
break;
case 58:
this.$={gram: Tipo.BOOLEAN, nodo: new NODO("Tipo")};
        this.$.nodo.hijos.push(new NODO(`${Tipo[Tipo.BOOLEAN]}`));
    
break;
case 59:
this.$={gram: Tipo.VOID, nodo: new NODO("Tipo")};
        this.$.nodo.hijos.push(new NODO(`${Tipo[Tipo.VOID]}`));
    
break;
case 60:
this.$= {gram: new Print($$[$0-2].gram,_$[$0-4].first_line,_$[$0-4].first_column),nodo: new NODO("PRINT")};
    this.$.nodo.hijos.push($$[$0-2].nodo);

break;
case 61:
this.$={gram: new Funciones($$[$0-4].gram,$$[$0-3].toLowerCase(),null,$$[$0].gram,_$[$0-4].first_line,_$[$0-4].first_column),nodo: new NODO("FUNCION")};
    this.$.nodo.hijos.push($$[$0-4].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-3]));
    this.$.nodo.hijos.push(new NODO($$[$0-2]));
    this.$.nodo.hijos.push(new NODO($$[$0-1]));
    this.$.nodo.hijos.push($$[$0].nodo);


break;
case 62:
this.$={gram: new Funciones($$[$0-5].gram,$$[$0-4].toLowerCase(),$$[$0-2].gram,$$[$0].gram,_$[$0-5].first_line,_$[$0-5].first_column),nodo: new NODO("FUNCION")};
    this.$.nodo.hijos.push($$[$0-5].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-4]));
    this.$.nodo.hijos.push(new NODO($$[$0-3]));
    this.$.nodo.hijos.push($$[$0-2].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-1]));
    this.$.nodo.hijos.push($$[$0].nodo);
    

break;
case 63:
$$[$0-2].gram.push($$[$0].gram); $$[$0-2].nodo.hijos.push($$[$0].nodo);
        this.$={gram: $$[$0-2].gram,nodo: $$[$0-2].nodo};
    
break;
case 64: case 69:
this.$={gram: [$$[$0].gram], nodo: new NODO("PARAMS")};
        this.$.nodo.hijos.push($$[$0].nodo)
    
break;
case 65:
this.$={gram: new Params($$[$0-1].gram,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column), nodo: new NODO("PARAM")};
    this.$.nodo.hijos.push($$[$0-1].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0]));

break;
case 66:
this.$={gram: new Llamada($$[$0-3].toLowerCase(),null,_$[$0-3].first_line,_$[$0-3].first_column),nodo: new NODO("Llamada")};
    this.$.nodo.hijos.push(new NODO($$[$0-3]));
    this.$.nodo.hijos.push(new NODO($$[$0-2]));
    this.$.nodo.hijos.push(new NODO($$[$0-1]));

break;
case 67:
this.$={gram: new Llamada($$[$0-4].toLowerCase(),$$[$0-2].gram,_$[$0-4].first_line,_$[$0-4].first_column),nodo: new NODO("Llamada")};
        this.$.nodo.hijos.push(new NODO($$[$0-4]));
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
    
break;
case 68:
$$[$0-2].gram.push($$[$0].gram);
        $$[$0-2].nodo.hijos.push($$[$0].nodo);
        this.$={gram: $$[$0-2].gram, nodo: $$[$0-2].nodo};
    
break;
case 70:
this.$={gram: new Lista($$[$0-9].gram,$$[$0-7].toLowerCase(),$$[$0-2].gram,_$[$0-11].first_line,_$[$0-11].first_column), nodo:new NODO("Lista")};
    this.$.nodo.hijos.push(new NODO($$[$0-11]));
    this.$.nodo.hijos.push($$[$0-9].nodo);
    this.$.nodo.hijos.push(new NODO($$[$0-7]));

break;
case 71:
this.$={gram:new AsignLista($$[$0-6].toLowerCase(),null,$$[$0-2].gram,_$[$0-6].first_line,_$[$0-6].first_column),nodo: new NODO("AddList")};
    this.$.nodo.hijos.push(new NODO($$[$0-6]))
    this.$.nodo.hijos.push(new NODO($$[$0-4]));
    this.$.nodo.hijos.push($$[$0-2].nodo);

break;
case 72:
this.$={gram: new AsignLista($$[$0-6].toLowerCase(),$$[$0-4].gram,$$[$0-1].gram,_$[$0-6].first_line,_$[$0-6].first_column),nodo: new NODO("Asignar_List")};
    this.$.nodo.hijos.push(new NODO($$[$0-6]));
    this.$.nodo.hijos.push($$[$0-4].nodo);
    this.$.nodo.hijos.push($$[$0-1].nodo);

break;
case 73:
this.$={gram: $$[$0-1].gram ,nodo: new NODO("Expresion")};
        this.$.nodo.hijos.push(new NODO("("));
        this.$.nodo.hijos.push($$[$0-1].nodo);
        this.$.nodo.hijos.push(new NODO(")"));
    
break;
case 74:
this.$= {gram: new Aritmeticas($$[$0-2].gram,"*",$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new NODO("Expresion")};
        this.$.nodo.hijos.push($$[$0-2].nodo)
        this.$.nodo.hijos.push(new NODO($$[$0-1]))
        this.$.nodo.hijos.push($$[$0].nodo)
    
break;
case 75:
this.$={gram: new Aritmeticas(new Literal(0,Tipo.INT,_$[$0-1].first_line,_$[$0-1].first_column),"NEG",$$[$0].gram,_$[$0-1].first_line,_$[$0-1].first_column), nodo: new NODO("Expresion")};
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo)
    
break;
case 76:
this.$={gram: new Logicas($$[$0].gram,"!",$$[$0].gram,_$[$0-1].first_line,_$[$0-1].first_column),nodo: new NODO("Expresion")};
        this.$.nodo.hijos.push(new NODO("!"));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 77:
this.$= {gram: new Aritmeticas($$[$0-2].gram,"+",$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column), nodo: new NODO("Expresion")};
    
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 78:
this.$= {gram: new Aritmeticas($$[$0-2].gram,"-",$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new NODO("Expresion")};
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 79:
this.$= {gram: new Aritmeticas($$[$0-2].gram,"/",$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new NODO("Expresion")};
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 80:
this.$= {gram: new Aritmeticas($$[$0-2].gram,"%",$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new NODO("Expresion")};
    
        this.$.nodo.hijos.push(new NODO($$[$0-2].nodo));
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push(new NODO($$[$0].nodo));
    
break;
case 81:
this.$= {gram:new Aritmeticas($$[$0-2].gram,"^",$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new NODO("Expresion")};
    
        this.$.nodo.hijos.push(new NODO($$[$0-2].nodo));
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push(new NODO($$[$0].nodo));
    
break;
case 82: case 84: case 86: case 87: case 89:
this.$= {gram: new Logicas($$[$0-2].gram,$$[$0-1],$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column), nodo: new NODO("Expresion")};
    
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 83:
this.$= {gram: new Logicas($$[$0-2].gram,$$[$0-1],$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new NODO("Expresion")};
    
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 85:
this.$= {gram: new Logicas($$[$0-2].gram,$$[$0-1],$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new  NODO("Expresion")};
    
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 88:
this.$= {gram: new Logicas($$[$0-2].gram,$$[$0-1],$$[$0].gram,_$[$0-2].first_line,_$[$0-2].first_column), nodo: new NODO("Expresion")};
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 90:
this.$={gram:new TERNARIO($$[$0-4].gram,$$[$0-2].gram,$$[$0].gram,_$[$0-4].first_line,_$[$0-4].first_column),nodo: new NODO("Expresion")};
        this.$.nodo.hijos.push($$[$0-4].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-2].nodo);
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push($$[$0].nodo);
    
break;
case 91:
this.$= {gram:new AccesoArr($$[$0-3].toLowerCase(),$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo: new NODO("Acceso_Arr")};
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push(new NODO("["));
        this.$.nodo.hijos.push($$[$0-1].nodo);
        this.$.nodo.hijos.push(new NODO("]"));
    
break;
case 92:
this.$= {gram:new AccesLista($$[$0-3].toLowerCase(),$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo:new NODO("Acceso_Lista")};
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push(new NODO("[["));
        this.$.nodo.hijos.push($$[$0-1].nodo);
        this.$.nodo.hijos.push(new NODO("]]"));
    
break;
case 93:
this.$={gram:new Especiales("1",$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo: new NODO("Especiales")};
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-1].nodo);
    
break;
case 94:
this.$={gram:new Especiales("2",$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo: new NODO("Especiales")};
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-1].nodo);
    
break;
case 95:
this.$={gram: new Especiales("3",$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo: new NODO("Especiales")};
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-1].nodo);
    
break;
case 96:
this.$={gram: new Especiales("4",$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo: new NODO("Especiales")};
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-1].nodo);
    
break;
case 97:
this.$={gram: new Especiales("5",$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo: new NODO("Especiales")};
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-1].nodo);
    
break;
case 98:
this.$={gram: new Especiales("6",$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo: new NODO("Especiales")};
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-1].nodo);
    
break;
case 99:
this.$={gram: new Especiales("7",$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column), nodo: new NODO("Especiales")};
        this.$.nodo.hijos.push(new NODO($$[$0-3]));
        this.$.nodo.hijos.push($$[$0-1].nodo);
    
break;
case 100:
this.$={gram:new Literal($$[$0],Tipo.DOUBLE,_$[$0].first_line,_$[$0].first_column),nodo: new NODO("Expresion")}; 
    
        this.$.nodo.hijos.push(new NODO($$[$0]));
    
break;
case 101:
this.$={gram:new Literal($$[$0],Tipo.INT,_$[$0].first_line,_$[$0].first_column),nodo: new NODO("Expresion")};
        this.$.nodo.hijos.push(new NODO("INT"));
    
break;
case 102:
this.$={gram:new Literal($$[$0],Tipo.STRING,_$[$0].first_line,_$[$0].first_column),nodo: new NODO("Expresion")};
    
        this.$.nodo.hijos.push(new NODO("STRING"));
    
break;
case 103:
this.$={gram:new Literal($$[$0],Tipo.CHAR,_$[$0].first_line,_$[$0].first_column),nodo: new NODO("Expresion")};
    
        this.$.nodo.hijos.push(new NODO("CHAR"));
    
break;
case 104:
this.$={gram: new Literal($$[$0],Tipo.BOOLEAN,_$[$0].first_line,_$[$0].first_column), nodo: new NODO("Expresion")};
    
        this.$.nodo.hijos.push(new NODO("BOOLEAN"));
    
break;
case 105:
this.$={gram: new Literal($$[$0],Tipo.BOOLEAN,_$[$0].first_line,_$[$0].first_column), nodo: new NODO("Expresion")};

        this.$.nodo.hijos.push(new NODO("BOOLEAN"));   
    
break;
case 106:
this.$={gram:new Acceso($$[$0].toLowerCase(),_$[$0].first_line,_$[$0].first_column),nodo: new NODO("Expresion")};
    
        this.$.nodo.hijos.push(new NODO("ID"));
    
break;
case 107:
this.$={gram: new Llamada($$[$0-2].toLowerCase(),null,_$[$0-2].first_line,_$[$0-2].first_column),nodo: new NODO("Llamada")};
        this.$.nodo.hijos.push(new NODO("ID"))
        this.$.nodo.hijos.push(new NODO("("))
        this.$.nodo.hijos.push(new NODO(")"))
    
break;
case 108:
this.$={gram: new Llamada($$[$0-3].toLowerCase(),$$[$0-1].gram,_$[$0-3].first_line,_$[$0-3].first_column),nodo:new NODO("Llamda")};
    
        this.$.nodo.hijos.push(new NODO("ID"));
        this.$.nodo.hijos.push(new NODO("("));
        this.$.nodo.hijos.push($$[$0-1].nodo)
        this.$.nodo.hijos.push(new NODO(")"));
    
break;
case 109:
this.$= {gram:new Asignacion($$[$0-1].toLowerCase(),"-",false,_$[$0-1].first_line,_$[$0-1].first_column),nodo:new NODO("Asignacion")};
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push(new NODO($$[$0]));
    
break;
case 110:
this.$= {gram:new Asignacion($$[$0-1].toLowerCase(),"+",false,_$[$0-1].first_line,_$[$0-1].first_column),nodo:new NODO("Asignacion")};
        this.$.nodo.hijos.push(new NODO($$[$0-1]));
        this.$.nodo.hijos.push(new NODO($$[$0]));
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:$V3,32:$V4,37:$V5,44:$V6,45:$V7,48:26,49:$V8,53:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,69:$Vh},{1:[3]},{5:[1,39],6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:$V3,32:$V4,37:$V5,44:$V6,45:$V7,48:26,49:$V8,53:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,69:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),{15:[1,41]},{15:[1,42]},o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),{21:43,49:[1,44]},o($Vi,[2,22]),{33:[1,45]},{33:[1,46]},{33:$Vj,50:[1,47],51:[1,48],52:[1,49],54:[1,50],72:[1,52],74:[1,53]},{49:[1,54],54:[1,55]},{33:[1,56]},{33:[1,57]},{33:[1,58]},{29:59,30:$Vk},{28:61,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{70:[1,79]},o($VC,[2,54]),o($VC,[2,55]),o($VC,[2,56]),o($VC,[2,57]),o($VC,[2,58]),o($VC,[2,59]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,21]),{33:$Vj},{28:80,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:81,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:82,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{15:[1,83]},{15:[1,84]},{28:85,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:88,33:$Vl,34:[1,86],49:$Vm,62:$Vn,68:87,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{73:[1,89]},{28:90,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{15:[1,92],33:[1,93],50:[1,91]},{55:[1,94]},{28:95,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{46:96,48:97,49:[1,98],59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf},{28:99,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{44:[1,100]},{4:101,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:$V3,31:[1,102],32:$V4,37:$V5,44:$V6,45:$V7,48:26,49:$V8,53:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,69:$Vh},{15:[1,103],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{28:119,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:120,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:121,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VS,[2,106],{33:[1,124],51:[1,126],52:[1,125],54:[1,122],74:[1,123]}),{33:[1,127]},{33:[1,128]},{33:[1,129]},{33:[1,130]},{33:[1,131]},{33:[1,132]},{33:[1,133]},o($VS,[2,100]),o($VS,[2,101]),o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),o($VS,[2,105]),{48:134,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf},{34:[1,135],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{34:[1,136],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{15:[1,137],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($Vi,[2,47]),o($Vi,[2,48]),{55:[1,138],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{15:[1,139]},{34:[1,140],58:$VT},o($VU,[2,69],{70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR}),{33:[1,142]},{70:$VD,71:$VE,75:[1,143],76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{28:144,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vi,[2,45]),{34:[1,145],48:148,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,66:146,67:147},{49:[1,149]},{34:[1,150],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{15:[1,151]},{49:[1,152]},{50:[1,153]},{34:[1,154],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{33:[1,155]},{6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:$V3,31:[1,156],32:$V4,37:$V5,44:$V6,45:$V7,48:26,49:$V8,53:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,69:$Vh},o($VV,[2,25]),o($Vi,[2,23]),{28:157,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:158,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:159,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:160,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:161,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:162,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:163,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:164,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:165,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:166,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:167,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:168,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:169,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:170,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:171,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{34:[1,172],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($VS,[2,75]),o($VW,[2,76],{70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO}),{28:173,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:174,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:88,33:$Vl,34:[1,175],49:$Vm,62:$Vn,68:176,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VS,[2,109]),o($VS,[2,110]),{28:177,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:178,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:179,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:180,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:181,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:182,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:183,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{71:[1,184]},{29:185,30:$Vk},{29:186,30:$Vk},o($Vi,[2,46]),{50:[1,187]},o($Vi,[2,66]),{15:[1,188]},{28:189,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:190,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{50:[1,191]},{15:[1,192],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{29:193,30:$Vk},{34:[1,194],58:[1,195]},o($VU,[2,64]),{49:[1,196]},{50:[1,197]},{15:[1,198]},{28:199,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{50:[1,200]},{28:201,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{30:[1,202]},{28:203,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VV,[2,24]),o($VX,[2,74],{82:$VK}),o($VY,[2,77],{76:$VF,80:$VI,81:$VJ,82:$VK}),o($VY,[2,78],{76:$VF,80:$VI,81:$VJ,82:$VK}),o($VX,[2,79],{82:$VK}),o($VX,[2,80],{82:$VK}),o($VS,[2,81]),o($VZ,[2,82],{76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VZ,[2,83],{76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VZ,[2,84],{76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VZ,[2,85],{76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VZ,[2,86],{76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VZ,[2,87],{76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o([15,31,34,42,55,58,75,87,89],[2,88],{70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,88:$VQ}),o($VW,[2,89],{70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO}),{42:[1,204],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($VS,[2,73]),{55:[1,205],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{70:$VD,71:$VE,75:[1,206],76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($VS,[2,107]),{34:[1,207],58:$VT},{34:[1,208],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{34:[1,209],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{34:[1,210],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{34:[1,211],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{34:[1,212],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{34:[1,213],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{34:[1,214],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{49:[1,215]},o($Vi,[2,26],{35:216,36:[1,217]}),o($Vi,[2,36]),{28:218,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vi,[2,67]),o($VU,[2,68],{70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR}),{34:[1,219],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{28:220,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vi,[2,44]),o($Vi,[2,61]),{29:221,30:$Vk},{48:148,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,67:222},o($VU,[2,65]),{30:[1,224],56:[1,223]},o($Vi,[2,60]),{15:[1,225],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{28:226,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{15:[2,39],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{38:227,40:228,41:$V_},{34:[1,230],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{28:231,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VS,[2,91]),o($VS,[2,92]),o($VS,[2,108]),o($VS,[2,93]),o($VS,[2,94]),o($VS,[2,95]),o($VS,[2,96]),o($VS,[2,97]),o($VS,[2,98]),o($VS,[2,99]),{50:[1,232]},o($Vi,[2,27]),{7:233,29:234,30:$Vk,32:$V4},{15:[1,235],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{15:[1,236]},{15:[1,237],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($Vi,[2,62]),o($VU,[2,63]),{48:238,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf},{28:240,33:$Vl,49:$Vm,57:239,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{47:241,49:[1,242]},{15:[2,38],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{31:[2,35],39:243,40:244,41:$V_,43:[1,245]},o($V$,[2,32]),{28:246,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{15:[1,247]},o([15,31,34,42,55,58,75,89],[2,90],{70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ}),{56:[1,248]},o($Vi,[2,28]),o($Vi,[2,29]),o($Vi,[2,53]),o($Vi,[2,71]),o($Vi,[2,72]),{54:[1,249]},{31:[1,250],58:[1,251]},o($V01,[2,52],{70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR}),{34:[1,252]},{50:[1,253],51:[1,254],52:[1,255]},{31:[1,256]},o($V$,[2,31]),{42:[1,257]},{42:[1,258],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($Vi,[2,43]),{69:[1,259]},{28:260,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{15:[1,261]},{28:262,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{29:263,30:$Vk},{28:264,33:$Vl,49:$Vm,62:$Vn,77:$Vo,78:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{34:[2,41]},{34:[2,42]},o($Vi,[2,30]),{4:265,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:$V3,32:$V4,37:$V5,44:$V6,45:$V7,48:26,49:$V8,53:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,69:$Vh},{4:266,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:$V3,32:$V4,37:$V5,44:$V6,45:$V7,48:26,49:$V8,53:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,69:$Vh},{70:[1,267]},{55:[1,268],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($Vi,[2,50]),o($V01,[2,51],{70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR}),o($Vi,[2,37]),{34:[2,40],70:$VD,71:$VE,76:$VF,77:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:$V3,31:[2,34],32:$V4,37:$V5,44:$V6,45:$V7,48:26,49:$V8,53:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,69:$Vh},o($V$,[2,33],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,48:26,6:40,14:$V0,16:$V1,25:$V2,27:$V3,32:$V4,37:$V5,44:$V6,45:$V7,49:$V8,53:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,69:$Vh}),{48:269,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf},{15:[1,270]},{71:[1,271]},o($Vi,[2,49]),{15:[1,272]},o($Vi,[2,70])],
defaultActions: {39:[2,1],254:[2,41],255:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //codigo js


    const {Literal}= require("../Expresion/Literal");
    const {Tipo}=require("../abstracts/Retorno");
    const {Aritmeticas}=require("../Expresion/Arimeticas");
    const {Print}= require("../instrucciones/Print");
    const {IF}= require("../instrucciones/IF");
    const {Logicas}= require("../Expresion/Logicas");
    const {Casteo}= require("../Expresion/Casteos");
    const {Instrucciones}= require("../instrucciones/Instrucciones");
    const {Declaracion}= require("../instrucciones/Declaracion");
    const {Acceso}= require("../Expresion/Acceso");
    const {Asignacion}= require("../instrucciones/Asignacion");
    const {While}= require("../instrucciones/While");
    const {FOR}= require("../instrucciones/FOR");
    const {SWITCH}= require("../instrucciones/Switch");
    const {CASE}= require("../instrucciones/CASE");
    const {BREAK}= require("../instrucciones/Break");
    const {DOWHile}= require("../instrucciones/DoWhile");
    const {DeclaArray}=require("../instrucciones/DeclaArr");
    const {AccesoArr}=require("../Expresion/AccesoArr");
    const {AsignarA}=require("../instrucciones/AsignArr");
    const {Funciones}=require("../instrucciones/Funciones");
    const {Llamada}=require("../instrucciones/Llamada");
    const {Params}=require("../Expresion/Params");
    const {Lista}=require("../instrucciones/DeclarList");
    const {AsignLista}=require("../instrucciones/AsignList");
    const {AccesLista}=require("../Expresion/AccesoList");
    const {TERNARIO}=require("../instrucciones/Ternario");
    const {Especiales}=require("../instrucciones/FuncEspec");
    const {Main}=require("../instrucciones/Main");
    const {NODO}= require("../Simbolos/AST");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios en blanco
break;
case 1://Comentarios de linea
break;
case 2://Comentarios multilinea
break;
case 3://espacios en blancos
break;
case 4://salto de linea
break;
case 5:return "FOR"
break;
case 6:return "WHILE"
break;
case 7:return "IF"
break;
case 8:return "tELSE"
break;
case 9:return "DOUBLE"
break;
case 10:return "INT"
break;
case 11:return "BOOLEAN"
break;
case 12:return "STRING"
break;
case 13:return "CHAR"
break;
case 14:return "SWITCH"
break;
case 15:return "CASE"
break;
case 16:return "PRINT"
break;
case 17:return "BREAK"
break;
case 18:return "CONTIN"
break;
case 19:return "DEFAULT"
break;
case 20:return "DO"
break;
case 21:return "NEW"
break;
case 22:return "ADD"
break;
case 23:return "VOID"
break;
case 24:return "RETN"
break;
case 25:return "MAIN"
break;
case 26:return "LIST"
break;
case 27:return "tLow"
break;
case 28:return "tUpp"
break;
case 29:return "len"
break;
case 30:return "trun"
break;
case 31:return "round"
break;
case 32:return "typ"
break;
case 33:return "toStr"
break;
case 34:return "tArr"
break;
case 35:return 89;
break;
case 36:return 74;
break;
case 37:return 75;
break;
case 38:return 72;
break;
case 39:return 51;
break;
case 40:return 88;
break;
case 41:return 83;
break;
case 42:return 84;
break;
case 43:return 85;
break;
case 44:return 86;
break;
case 45:return 79;
break;
case 46:return 52;
break;
case 47:return 76;
break;
case 48:return 81;
break;
case 49:return 82;
break;
case 50:return 80;
break;
case 51:return 77;
break;
case 52:return 33;
break;
case 53:return 34;
break;
case 54:return 30;
break;
case 55:return 31;
break;
case 56:return 54;
break;
case 57:return 55;
break;
case 58:return 70;
break;
case 59:return 71;
break;
case 60:return 50;
break;
case 61:return "ttrue";
break;
case 62:return "tfalse";
break;
case 63:return 78;
break;
case 64:return 42;
break;
case 65:return 15;
break;
case 66:return 58;
break;
case 67:return 87;
break;
case 68:cadena = ''; this.begin("string");
break;
case 69:cadena+= yy_.yytext;
break;
case 70:cadena+="\"";
break;
case 71:cadena+="\n"
break;
case 72:cadena+=" ";
break;
case 73:cadena+="\t";
break;
case 74:cadena+="\\";
break;
case 75:cadena+="\r";
break;
case 76:cadena+="\'";
break;
case 77:yy_.yytext=cadena;this.popState(); return 99;
break;
case 78:return "DECIMAL";
break;
case 79:return "ID";
break;
case 80:return "ENTERO";
break;
case 81:return "CHAR";
break;
case 82:return "EOF"
break;
case 83:
    console.log("Error",yy_.yylloc.first_line,yy_.yylloc.first_column,"-",yy_.yylloc.last_column)

break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\/\/[^\n]*)/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:\s+)/i,/^(?:\n)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:main\b)/i,/^(?:list\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:\?)/i,/^(?:\[\[)/i,/^(?:\]\])/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:&&)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\|\|)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\r)/i,/^(?:[\\\']+)/i,/^(?:["])/i,/^(?:([0-9]+\.[0-9]+))/i,/^(?:(\b[a-zA-Z_]\w*\b))/i,/^(?:([0-9]+))/i,/^(?:'[^\']')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[69,70,71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,81,82,83],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}