/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,21],$V3=[1,39],$V4=[1,40],$V5=[1,41],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,37],$Va=[1,29],$Vb=[1,35],$Vc=[1,30],$Vd=[1,34],$Ve=[1,31],$Vf=[1,36],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,33],$Vn=[1,38],$Vo=[5,14,16,25,33,37,38,39,40,41,42,45,46,49,53,55,56,57,61,65,71,72,73,74,75,76,77,81],$Vp=[1,63],$Vq=[1,72],$Vr=[1,77],$Vs=[1,74],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,76],$Vz=[1,87],$VA=[1,75],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,88],$VF=[1,89],$VG=[36,61,66,83],$VH=[2,69],$VI=[1,132],$VJ=[1,133],$VK=[1,122],$VL=[1,124],$VM=[1,123],$VN=[1,125],$VO=[1,126],$VP=[1,127],$VQ=[1,128],$VR=[1,129],$VS=[1,130],$VT=[1,131],$VU=[1,134],$VV=[1,135],$VW=[1,136],$VX=[15,36,45,54,67,70,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100],$VY=[1,165],$VZ=[36,70],$V_=[5,14,16,25,33,37,38,39,40,41,42,45,46,48,49,53,55,56,57,61,65,71,72,73,74,75,76,77,81],$V$=[15,36,45,54,67,70,82,83,87,88,89,90,91,92,94,95,96,97,98,99,100],$V01=[15,36,45,54,67,70,82,83,87,89,90,94,95,96,97,98,99,100],$V11=[15,36,45,54,67,70,82,83,87,94,95,96,97,98,99,100],$V21=[1,265],$V31=[45,53,55],$V41=[45,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"instrucciones":4,"EOF":5,"instruccion":6,"iIF":7,"iwhile":8,"asignacion":9,"declaracion":10,"fPRINT":11,"ifor":12,"switch":13,"BREAK":14,";":15,"CONTIN":16,"dowhile":17,"decArray":18,"asignarArr":19,"FUNCION":20,"Llamada":21,"RETORNO":22,"Listas":23,"AsignList":24,"MAIN":25,"NewAsignacion":26,"LENG":27,"TOLOW":28,"TOUPP":29,"TRUNC":30,"ROUN":31,"TYPE":32,"len":33,"(":34,"Expresion":35,")":36,"tLow":37,"tUpp":38,"trun":39,"round":40,"typ":41,"RETN":42,"BSENTENCIAS":43,"{":44,"}":45,"IF":46,"ELSE":47,"tELSE":48,"SWITCH":49,"BLOQSWITCH":50,"fDEFAULT":51,"fcase":52,"CASE":53,":":54,"DEFAULT":55,"WHILE":56,"FOR":57,"AssignFor":58,"Actualiz":59,"TIPO":60,"ID":61,"=":62,"++":63,"--":64,"DO":65,"[":66,"]":67,"NEW":68,"VALORES":69,",":70,"DOUBLE":71,"INT":72,"STRING":73,"CHAR":74,"BOOLEAN":75,"VOID":76,"PRINT":77,"PARAMS":78,"PARAM":79,"ARG":80,"LIST":81,"<":82,">":83,".":84,"ADD":85,"[[":86,"]]":87,"*":88,"-":89,"+":90,"/":91,"%":92,"^":93,"==":94,"!=":95,"<=":96,">=":97,"||":98,"&&":99,"?":100,"F":101,"DECIMAL":102,"ENTERO":103,"CADENA":104,"ttrue":105,"tfalse":106,"CASTEO":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"BREAK",15:";",16:"CONTIN",25:"MAIN",33:"len",34:"(",36:")",37:"tLow",38:"tUpp",39:"trun",40:"round",41:"typ",42:"RETN",44:"{",45:"}",46:"IF",48:"tELSE",49:"SWITCH",53:"CASE",54:":",55:"DEFAULT",56:"WHILE",57:"FOR",61:"ID",62:"=",63:"++",64:"--",65:"DO",66:"[",67:"]",68:"NEW",70:",",71:"DOUBLE",72:"INT",73:"STRING",74:"CHAR",75:"BOOLEAN",76:"VOID",77:"PRINT",81:"LIST",82:"<",83:">",84:".",85:"ADD",86:"[[",87:"]]",88:"*",89:"-",90:"+",91:"/",92:"%",93:"^",94:"==",95:"!=",96:"<=",97:">=",98:"||",99:"&&",100:"?",102:"DECIMAL",103:"ENTERO",104:"CADENA",105:"ttrue",106:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[27,5],[28,5],[29,5],[30,5],[31,5],[32,5],[22,3],[43,3],[43,2],[7,5],[7,6],[47,2],[47,2],[13,8],[50,2],[50,1],[52,4],[51,3],[51,0],[8,5],[12,9],[58,4],[58,3],[59,3],[59,2],[59,2],[17,7],[10,5],[10,3],[9,4],[9,3],[9,3],[18,11],[18,9],[69,3],[69,1],[19,7],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[11,5],[20,5],[20,6],[78,3],[78,1],[79,2],[21,4],[21,5],[80,3],[80,1],[23,12],[24,7],[26,7],[35,3],[35,3],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,5],[35,4],[35,4],[35,4],[35,4],[35,4],[35,4],[35,4],[35,4],[35,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,3],[101,4],[101,2],[101,2],[101,1],[107,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 43:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 44: case 64: case 76: case 81:
this.$=[$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 22: case 41: case 122:
this.$=$$[$0];
break;
case 11:
this.$=new BREAK("1",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 12:
this.$=new BREAK("2",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 21:
this.$=$$[$0-1];
break;
case 29:
this.$=new Especiales("1",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 30:
this.$=new Especiales("2",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 31:
this.$=new Especiales("3",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 32:
this.$=new Especiales("4",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 33:
this.$=new Especiales("5",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 34:
this.$=new Especiales("6",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 35:
this.$=new BREAK("3",$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 36:
this.$=new Instrucciones($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 38:
this.$=new IF($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 39:
this.$=new IF($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 40:
this.$ =$$[$0];
break;
case 42:
this.$= new SWITCH($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 45:
this.$=new CASE($$[$0-2],$$[$0]);
break;
case 46:
this.$= $$[$0];
break;
case 48:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 49:
this.$=new FOR($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 50:
this.$=new Declaracion($$[$0-3],$$[$0-2].toLowerCase(),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 51:
this.$= new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 52:
this.$=new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 53:
this.$= new Asignacion($$[$0-1],"+",false,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 54:
this.$= new Asignacion($$[$0-1],"-",false,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 55:
this.$=new DOWHile($$[$0-5],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 56:
this.$=new Declaracion($$[$0-4],$$[$0-3].toLowerCase(),$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 57:
this.$=new Declaracion($$[$0-2],$$[$0-1].toLowerCase(),null,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 58:
this.$= new Asignacion($$[$0-3].toLowerCase(),$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 59:
this.$= new Asignacion($$[$0-2].toLowerCase(),"+",false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 60:
this.$= new Asignacion($$[$0-2].toLowerCase(),"-",false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 61:
this.$=new DeclaArray($$[$0-10],$$[$0-7],$$[$0-4],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 62:
this.$=new DeclaArray($$[$0-8],$$[$0-5],null,$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 63: case 75:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 65:
this.$=new AsignarA($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 66:
this.$=Tipo.DOUBLE;
break;
case 67:
this.$=Tipo.INT;
break;
case 68:
this.$=Tipo.STRING;
break;
case 69:
this.$=Tipo.CHAR;
break;
case 70:
this.$=Tipo.BOOLEAN;
break;
case 71:
this.$=Tipo.VOID;
break;
case 72:
this.$= new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 73:
this.$=new Funciones($$[$0-4],$$[$0-3].toLowerCase(),null,$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 74:
this.$=new Funciones($$[$0-5],$$[$0-4].toLowerCase(),$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 77:
this.$=new Params($$[$0-1],$$[$0]);
break;
case 78:
this.$=new Llamada($$[$0-3].toLowerCase(),null,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 79:
this.$=new Llamada($$[$0-4].toLowerCase(),$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 80:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 82:
this.$=new Lista($$[$0-9],$$[$0-7],$$[$0-2],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 83:
this.$=new AsignLista($$[$0-6],null,$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 84:
this.$=new AsignLista($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 86:
this.$= new Aritmeticas($$[$0-2],"*",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 87:
this.$=new Aritmeticas(new Literal(0,Tipo.INT,_$[$0-1].first_line,_$[$0-1].first_column),"NEG",$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 88:
this.$= new Aritmeticas($$[$0-2],"+",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 89:
this.$= new Aritmeticas($$[$0-2],"-",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 90:
this.$= new Aritmeticas($$[$0-2],"/",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 91:
this.$= new Aritmeticas($$[$0-2],"%",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 92:
this.$= new Aritmeticas($$[$0-2],"^",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100:
this.$= new Logicas($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 101:
this.$=new TERNARIO($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 102:
this.$= new AccesoArr($$[$0-3].toLowerCase(),$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 103:
this.$= new AccesLista($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 104:
this.$=new Especiales("1",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 105:
this.$=new Especiales("2",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 106:
this.$=new Especiales("3",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 107:
this.$=new Especiales("4",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 108:
this.$=new Especiales("5",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 109:
this.$=new Especiales("6",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 111:
this.$=new Literal($$[$0],Tipo.DOUBLE,_$[$0].first_line,_$[$0].first_column);
break;
case 112:
this.$=new Literal($$[$0],Tipo.INT,_$[$0].first_line,_$[$0].first_column);
break;
case 113:
this.$=new Literal($$[$0],Tipo.STRING,_$[$0].first_line,_$[$0].first_column);
break;
case 114:
this.$=new Literal($$[$0],Tipo.CHAR,_$[$0].first_line,_$[$0].first_column);
break;
case 115: case 116:
this.$=new Literal($$[$0],Tipo.BOOLEAN,_$[$0].first_line,_$[$0].first_column);
break;
case 117:
this.$=new Acceso($$[$0].toLowerCase(),_$[$0].first_line,_$[$0].first_column);
break;
case 118:
this.$=new Llamada($$[$0-2].toLowerCase(),null,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 119:
this.$=new Llamada($$[$0-3].toLowerCase(),$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 120:
this.$= new Asignacion($$[$0-1].toLowerCase(),"-",true,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 121:
this.$= new Asignacion($$[$0-1].toLowerCase(),"+",true,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 123:
this.$=new Casteo($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,60:32,61:$Ve,65:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,81:$Vn},{1:[3]},{5:[1,51],6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,60:32,61:$Ve,65:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,81:$Vn},o($Vo,[2,3]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),{15:[1,53]},{15:[1,54]},o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),o($Vo,[2,20]),{21:55,61:[1,56]},o($Vo,[2,22]),o($Vo,[2,23]),o($Vo,[2,24]),o($Vo,[2,25]),o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),{34:[1,57]},{34:[1,58]},{34:$Vp,62:[1,59],63:[1,60],64:[1,61],66:[1,62],84:[1,64],86:[1,65]},{61:[1,66],66:[1,67]},{34:[1,68]},{34:[1,69]},{34:[1,70]},{43:71,44:$Vq},{33:$Vr,34:$Vs,35:73,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{82:[1,91]},{34:[1,92]},{34:[1,93]},{34:[1,94]},{34:[1,95]},{34:[1,96]},{34:[1,97]},o($VG,[2,66]),o($VG,[2,67]),o($VG,[2,68]),o([61,66,83],$VH),o($VG,[2,70]),o($VG,[2,71]),{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,21]),{34:$Vp},{33:$Vr,34:$Vs,35:98,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:99,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:100,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{15:[1,101]},{15:[1,102]},{33:$Vr,34:$Vs,35:103,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:106,36:[1,104],37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,80:105,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{85:[1,107]},{33:$Vr,34:$Vs,35:108,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{15:[1,110],34:[1,111],62:[1,109]},{67:[1,112]},{33:$Vr,34:$Vs,35:113,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{58:114,60:115,61:[1,116],71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl},{33:$Vr,34:$Vs,35:117,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{56:[1,118]},{4:119,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,45:[1,120],46:$Va,49:$Vb,56:$Vc,57:$Vd,60:32,61:$Ve,65:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,81:$Vn},{15:[1,121],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{33:$Vr,34:$Vs,35:137,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,60:138,61:$Vy,71:$Vg,72:$Vh,73:$Vi,74:[1,139],75:$Vk,76:$Vl,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:140,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},o($VX,[2,117],{34:[1,143],63:[1,145],64:[1,144],66:[1,141],86:[1,142]}),{34:[1,146]},{34:[1,147]},{34:[1,148]},{34:[1,149]},{34:[1,150]},{34:[1,151]},o($VX,[2,110]),o($VX,[2,111]),o($VX,[2,112]),o($VX,[2,113]),o($VX,[2,114]),o($VX,[2,115]),o($VX,[2,116]),o($VX,[2,122]),{60:152,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl},{33:$Vr,34:$Vs,35:153,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:154,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:155,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:156,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:157,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:158,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{36:[1,159],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,160],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{15:[1,161],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},o($Vo,[2,59]),o($Vo,[2,60]),{67:[1,162],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{15:[1,163]},{36:[1,164],70:$VY},o($VZ,[2,81],{82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW}),{34:[1,166]},{82:$VI,83:$VJ,87:[1,167],88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{33:$Vr,34:$Vs,35:168,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},o($Vo,[2,57]),{36:[1,169],60:172,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,78:170,79:171},{61:[1,173]},{36:[1,174],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{15:[1,175]},{61:[1,176]},{62:[1,177]},{36:[1,178],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{34:[1,179]},{6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,45:[1,180],46:$Va,49:$Vb,56:$Vc,57:$Vd,60:32,61:$Ve,65:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,81:$Vn},o($V_,[2,37]),o($Vo,[2,35]),{33:$Vr,34:$Vs,35:181,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:182,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:183,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:184,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:185,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:186,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:187,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:188,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:189,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:190,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:191,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:192,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:193,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:194,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:195,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{36:[1,196],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,197]},o([36,82,83,88,89,90,91,92,93,94,95,96,97,98,99,100],$VH),o($VX,[2,87]),{33:$Vr,34:$Vs,35:198,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:199,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:106,36:[1,200],37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,80:201,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},o($VX,[2,120]),o($VX,[2,121]),{33:$Vr,34:$Vs,35:202,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:203,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:204,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:205,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:206,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:207,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{83:[1,208]},{36:[1,209],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,210],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,211],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,212],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,213],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,214],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{43:215,44:$Vq},{43:216,44:$Vq},o($Vo,[2,58]),{62:[1,217]},o($Vo,[2,78]),{15:[1,218]},{33:$Vr,34:$Vs,35:219,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{33:$Vr,34:$Vs,35:220,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{62:[1,221]},{15:[1,222],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{43:223,44:$Vq},{36:[1,224],70:[1,225]},o($VZ,[2,76]),{61:[1,226]},{62:[1,227]},{15:[1,228]},{33:$Vr,34:$Vs,35:229,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{62:[1,230]},{33:$Vr,34:$Vs,35:231,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{44:[1,232]},{33:$Vr,34:$Vs,35:233,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},o($V_,[2,36]),o($V$,[2,86],{93:$VP}),o($V01,[2,88],{88:$VK,91:$VN,92:$VO,93:$VP}),o($V01,[2,89],{88:$VK,91:$VN,92:$VO,93:$VP}),o($V$,[2,90],{93:$VP}),o($V$,[2,91],{93:$VP}),o($VX,[2,92]),o($V11,[2,93],{88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o($V11,[2,94],{88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o($V11,[2,95],{88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o($V11,[2,96],{88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o($V11,[2,97],{88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o($V11,[2,98],{88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o([15,36,45,54,67,70,87,98,100],[2,99],{82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VV}),o([15,36,45,54,67,70,87,98,99,100],[2,100],{82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT}),{54:[1,234],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},o($VX,[2,85]),{33:$Vr,34:$Vs,35:235,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{67:[1,236],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{82:$VI,83:$VJ,87:[1,237],88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},o($VX,[2,118]),{36:[1,238],70:$VY},{36:[1,239],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,240],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,241],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,242],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,243],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{36:[1,244],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{61:[1,245]},{15:[1,246]},{15:[1,247]},{15:[1,248]},{15:[1,249]},{15:[1,250]},{15:[1,251]},o($Vo,[2,38],{47:252,48:[1,253]}),o($Vo,[2,48]),{33:$Vr,34:$Vs,35:254,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},o($Vo,[2,79]),o($VZ,[2,80],{82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW}),{36:[1,255],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{33:$Vr,34:$Vs,35:256,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},o($Vo,[2,56]),o($Vo,[2,73]),{43:257,44:$Vq},{60:172,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,79:258},o($VZ,[2,77]),{44:[1,260],68:[1,259]},o($Vo,[2,72]),{15:[1,261],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{33:$Vr,34:$Vs,35:262,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{15:[2,51],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{50:263,52:264,53:$V21},{36:[1,266],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{33:$Vr,34:$Vs,35:267,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},o($VX,[2,123]),o($VX,[2,102]),o($VX,[2,103]),o($VX,[2,119]),o($VX,[2,104]),o($VX,[2,105]),o($VX,[2,106]),o($VX,[2,107]),o($VX,[2,108]),o($VX,[2,109]),{62:[1,268]},o($Vo,[2,29]),o($Vo,[2,30]),o($Vo,[2,31]),o($Vo,[2,32]),o($Vo,[2,33]),o($Vo,[2,34]),o($Vo,[2,39]),{7:269,43:270,44:$Vq,46:$Va},{15:[1,271],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{15:[1,272]},{15:[1,273],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},o($Vo,[2,74]),o($VZ,[2,75]),{60:274,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl},{33:$Vr,34:$Vs,35:276,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,69:275,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{59:277,61:[1,278]},{15:[2,50],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{45:[2,47],51:279,52:280,53:$V21,55:[1,281]},o($V31,[2,44]),{33:$Vr,34:$Vs,35:282,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{15:[1,283]},o([15,36,45,54,67,70,87,100],[2,101],{82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV}),{68:[1,284]},o($Vo,[2,40]),o($Vo,[2,41]),o($Vo,[2,65]),o($Vo,[2,83]),o($Vo,[2,84]),{66:[1,285]},{45:[1,286],70:[1,287]},o($V41,[2,64],{82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW}),{36:[1,288]},{62:[1,289],63:[1,290],64:[1,291]},{45:[1,292]},o($V31,[2,43]),{54:[1,293]},{54:[1,294],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},o($Vo,[2,55]),{81:[1,295]},{33:$Vr,34:$Vs,35:296,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{15:[1,297]},{33:$Vr,34:$Vs,35:298,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{43:299,44:$Vq},{33:$Vr,34:$Vs,35:300,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,61:$Vy,74:$Vz,89:$VA,101:83,102:$VB,103:$VC,104:$VD,105:$VE,106:$VF,107:90},{36:[2,53]},{36:[2,54]},o($Vo,[2,42]),{4:301,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,60:32,61:$Ve,65:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,81:$Vn},{4:302,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,60:32,61:$Ve,65:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,81:$Vn},{82:[1,303]},{67:[1,304],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},o($Vo,[2,62]),o($V41,[2,63],{82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW}),o($Vo,[2,49]),{36:[2,52],82:$VI,83:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,98:$VU,99:$VV,100:$VW},{6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,16:$V1,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V2,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,45:[2,46],46:$Va,49:$Vb,56:$Vc,57:$Vd,60:32,61:$Ve,65:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,81:$Vn},o($V31,[2,45],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:22,27:23,28:24,29:25,30:26,31:27,32:28,60:32,6:52,14:$V0,16:$V1,25:$V2,33:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,46:$Va,49:$Vb,56:$Vc,57:$Vd,61:$Ve,65:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,81:$Vn}),{60:305,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl},{15:[1,306]},{83:[1,307]},o($Vo,[2,61]),{15:[1,308]},o($Vo,[2,82])],
defaultActions: {51:[2,1],290:[2,53],291:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //codigo js


    const {Literal}= require("../Expresion/Literal");
    const {Tipo}=require("../abstracts/Retorno");
    const {Aritmeticas}=require("../Expresion/Arimeticas");
    const {Print}= require("../instrucciones/Print");
    const {IF}= require("../instrucciones/IF");
    const {Logicas}= require("../Expresion/Logicas");
    const {Casteo}= require("../Expresion/Casteos");
    const {Instrucciones}= require("../instrucciones/Instrucciones");
    const {Declaracion}= require("../instrucciones/Declaracion");
    const {Acceso}= require("../Expresion/Acceso");
    const {Asignacion}= require("../instrucciones/Asignacion");
    const {While}= require("../instrucciones/While");
    const {FOR}= require("../instrucciones/FOR");
    const {SWITCH}= require("../instrucciones/Switch");
    const {CASE}= require("../instrucciones/CASE");
    const {BREAK}= require("../instrucciones/Break");
    const {DOWHile}= require("../instrucciones/DoWhile");
    const {DeclaArray}=require("../instrucciones/DeclaArr");
    const {AccesoArr}=require("../Expresion/AccesoArr");
    const {AsignarA}=require("../instrucciones/AsignArr");
    const {Funciones}=require("../instrucciones/Funciones");
    const {Llamada}=require("../instrucciones/Llamada");
    const {Params}=require("../Expresion/Params");
    const {Lista}=require("../instrucciones/DeclarList");
    const {AsignLista}=require("../instrucciones/AsignList");
    const {AccesLista}=require("../Expresion/AccesoList");
    const {TERNARIO}=require("../instrucciones/Ternario");
    const {Especiales}=require("../instrucciones/FuncEspec");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios en blanco
break;
case 1://Comentarios de linea
break;
case 2://Comentarios multilinea
break;
case 3://espacios en blancos
break;
case 4://salto de linea
break;
case 5:return "FOR"
break;
case 6:return "WHILE"
break;
case 7:return "IF"
break;
case 8:return "tELSE"
break;
case 9:return "DOUBLE"
break;
case 10:return "INT"
break;
case 11:return "BOOLEAN"
break;
case 12:return "STRING"
break;
case 13:return "CHAR"
break;
case 14:return "SWITCH"
break;
case 15:return "CASE"
break;
case 16:return "PRINT"
break;
case 17:return "BREAK"
break;
case 18:return "CONTIN"
break;
case 19:return "DEFAULT"
break;
case 20:return "DO"
break;
case 21:return "NEW"
break;
case 22:return "ADD"
break;
case 23:return "VOID"
break;
case 24:return "RETN"
break;
case 25:return "MAIN"
break;
case 26:return "LIST"
break;
case 27:return "tLow"
break;
case 28:return "tUpp"
break;
case 29:return "len"
break;
case 30:return "trun"
break;
case 31:return "round"
break;
case 32:return "typ"
break;
case 33:return "toStr"
break;
case 34:return "tArr"
break;
case 35:return 100;
break;
case 36:return 86;
break;
case 37:return 87;
break;
case 38:return 84;
break;
case 39:return 63;
break;
case 40:return 99;
break;
case 41:return 94;
break;
case 42:return 95;
break;
case 43:return 96;
break;
case 44:return 97;
break;
case 45:return 90;
break;
case 46:return 64;
break;
case 47:return 88;
break;
case 48:return 92;
break;
case 49:return 93;
break;
case 50:return 91;
break;
case 51:return 89;
break;
case 52:return 34;
break;
case 53:return 36;
break;
case 54:return 44;
break;
case 55:return 45;
break;
case 56:return 66;
break;
case 57:return 67;
break;
case 58:return 82;
break;
case 59:return 83;
break;
case 60:return 62;
break;
case 61:return "ttrue";
break;
case 62:return "tfalse";
break;
case 63:return '!';
break;
case 64:return 54;
break;
case 65:return 15;
break;
case 66:return 70;
break;
case 67:return 98;
break;
case 68:return "DECIMAL";
break;
case 69:return "ID";
break;
case 70:return "ENTERO";
break;
case 71:return "CADENA";
break;
case 72:return "CHAR";
break;
case 73:return "EOF"
break;
case 74:
    console.log("Error",yy_.yylloc.first_line,yy_.yylloc.first_column,"-",yy_.yylloc.last_column)

break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\/\/[^\n]*)/i,/^(?:\/\*[^\/]*\*\/)/i,/^(?:\s+)/i,/^(?:\n)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:main\b)/i,/^(?:list\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:\?)/i,/^(?:\[\[)/i,/^(?:\]\])/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:&&)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\|\|)/i,/^(?:([0-9]+\.[0-9]+))/i,/^(?:(\b[a-zA-Z_]\w*\b))/i,/^(?:([0-9]+))/i,/^(?:"[^\"]*")/i,/^(?:'[^\']')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}